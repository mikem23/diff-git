#!/usr/bin/python

# Copyright (c) 2014-2016 Red Hat, Inc.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#       Mike McLean <mikem@redhat.com>


import logging
from optparse import OptionParser
import os.path
import shutil
import sys
import subprocess
import tempfile

def _(args):
    """Stub function for translation"""
    return args

def get_options():
    """process options from command line"""

    usage = _("%prog [options] giturl1 giturl2")
    parser = OptionParser(usage=usage)
    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help=_("be more verbose"))
    parser.add_option("-q", "--quiet", action="store_true", default=False,
                      help=_("be less verbose"))
    parser.add_option("-d", "--debug", action="store_true", default=False,
                      help=_("show debug output"))
    parser.add_option("--ignore-ff", action="store_true", default=False,
                      help=_("ignore fast-forwards"))
    # more opts ?
    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.error("The command accepts exactly two arguments")
    options.repos = []
    for repo in args:
        if os.path.isdir(repo):
            repo = os.path.abspath(repo)
            options.repos.append(repo)

    return options


def log_cmd(cmd, logfile=None, fatal=True, **kwargs):
    """Run command and log output if able"""
    logger.debug('Running command: %s', ' '.join(cmd))
    if logfile:
        #kwargs.setdefault('stdout', sys.stdout)
        kwargs.setdefault('stderr', subprocess.STDOUT)
        kwargs.setdefault('close_fds', True)
    proc = subprocess.Popen(cmd, **kwargs)
    ret = proc.wait()
    if ret:
        if fatal:
            raise RuntimeError, "command failed: %r" % cmd
        #otherwise
        logger.debug("Command failed: %r" % cmd)
    return ret


def get_output(cmd, fatal=True, **kwargs):
     """Run command and log output if able"""
     logger.debug('Getting output from command: %s', ' '.join(cmd))
     kwargs['stdout'] = subprocess.PIPE
     kwargs.setdefault('close_fds', True)
     if 'stderr' in kwargs:
         # convenience values
         if kwargs['stderr'] == 'null':
             kwargs['stderr'] = file('/dev/null', 'w')
         elif kwargs['stderr'] == 'keep':
             kwargs['stderr'] = subprocess.STDOUT
     proc = subprocess.Popen(cmd, **kwargs)
     output = proc.communicate()[0]
     logger.debug("Command output was:\n%s", output)
     rv = proc.wait()
     if rv:
         logger.warn("Command failed: %r" % cmd)
         if fatal:
             raise RuntimeError, "command failed: %r" % cmd
     return output, rv



def main():
    heads = []
    retval = 0
    for repo in options.repos:
        cmd = ['git', 'ls-remote', '--heads', repo]
        output, rv = get_output(cmd, stderr='null', fatal=True)
        rows = [ r.split(None, 1) for r in output.splitlines()]
        hdict = dict([(ref, sha) for (sha, ref) in rows])
        heads.append(hdict)
    common = [h for h in heads[1] if h in heads[0]]
    added = [h for h in heads[1] if h not in heads[0]]
    dropped = [h for h in heads[0] if h not in heads[1]]
    if added:
        logger.warning('Added %i heads:', len(added))
        retval = 1
        for h in added:
            logger.warning('+ %s', h)
    if dropped:
        logger.warning('Dropped %i heads:', len(dropped))
        retval = 1
        for h in dropped:
            logger.warning('- %s', h)
    changed = []
    if common:
        for h in common:
            if heads[0][h] != heads[1][h]:
                changed.append(h)
                logger.debug('Head %s differs:', h)
                logger.debug('  %s', heads[0][h])
                logger.debug('  -> %s', heads[1][h])
            else:
                logger.info('Branch %s matches', h)
    if changed:
        workdir = tempfile.mkdtemp()
        logger.debug('Using workdir: %s', workdir)
        log_cmd(['git', 'init', '-q'], cwd=workdir)
        for h in changed:
            if h.startswith('refs/heads/'):
                name = h[11:]
            else:
                logger.warning('Unexpected head ref format: %s', h)
                name = h
            for n, repo in enumerate(options.repos):
                cmd = ['git', 'fetch', '-q', '--depth=100', '--no-tags', repo,
                        '+%s:refs/repos/%i/%s' % (h, n, name)]
                #TODO depth config
                #TODO config for checking tags
                log_cmd(cmd, cwd=workdir)
            #check ancestry
            cmd = ['git', 'merge-base',
                    'refs/repos/0/%s' % name, 'refs/repos/1/%s' % name]
            output, rv = get_output(cmd, cwd=workdir, fatal=False)
            if rv:
                retval = 1
                logger.warning('Head %s is unrelated', h)
                #TODO - try fetching greater depth?
                continue
            ref = output.strip()
            if ref ==  heads[0][h]:
                if options.ignore_ff:
                    continue
                retval = 1
                logger.warning('Head %s is fast-forwarded', h)
                cmd = ['git', 'log', '--oneline', 'refs/repos/0/%s..refs/repos/1/%s' % (name, name)]
                log_cmd(cmd, cwd=workdir)
                continue
            elif ref == heads[1][h]:
                retval = 1
                logger.warning('Head %s is rolled back', h)
                cmd = ['git', 'log', '--oneline', 'refs/repos/1/%s..refs/repos/0/%s' % (name, name)]
                log_cmd(cmd, cwd=workdir)
                continue
            retval = 1
            logger.warning('Head %s has deviated', h)
        shutil.rmtree(workdir)
    return retval


if __name__ == '__main__':
    options = get_options()
    logger = logging.getLogger("diff-git")
    if options.debug:
        log_level = logging.DEBUG
    elif options.verbose:
        log_level = logging.INFO
    elif options.quiet:
        log_level = logging.ERROR
    else:
        log_level = logging.WARNING
    logger.setLevel(log_level)
    handler = logging.StreamHandler(sys.stdout)
    log_fmt = ''
    handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
    handler.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    rv = main()
    sys.exit(rv)
